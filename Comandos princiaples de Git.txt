                                                                UNIVERSIDAD DE LAS FUERZAS ARMADAS 
                                                                               "ESPE"

   Nombre:Christopher Joel Viracucha Villamarin
   NRC: 13930
   FECHA: 09-11-2023
   PROGRAMACION ORIENTADA A OBJETOS

-¿Qué es Git?

Git es un sistema de control de versiones distribuido, lo que significa que un clon local del proyecto es un repositorio de control de versiones completo. Este repositorio local completamente funcional facilita el trabajo sin conexión o de forma remota. Los desarrolladores hacen su trabajo localmente y luego sincronizan la copia del repositorio con la copia del servidor. Este paradigma difiere del control de versiones centralizado, donde el cliente debe sincronizar el código con el servidor antes de crear una nueva versión.

La flexibilidad y popularidad de Git lo convierten en una excelente opción para cualquier equipo. Muchos desarrolladores y graduados universitarios ya saben cómo utilizar Git. La comunidad de usuarios de Git ha creado recursos para capacitar a los desarrolladores y la popularidad de Git hace que sea fácil obtener ayuda cuando sea necesario. Casi todos los entornos de desarrollo tienen soporte Git y herramientas de línea de comandos Git implementadas en los principales sistemas operativos.

Es el sistema de control de versiones más moderno y popular del mundo. Fue creado por Linus Torvalds para garantizar la eficiencia y confiabilidad del mantenimiento íntegro de versiones de un proyecto, aun cuando este tenga un gran número de archivos o ramas en su código fuente.
-¿Qué es Github?

GitHub es una plataforma de alojamiento de Microsoft que ofrece a los desarrolladores la posibilidad de crear repositorios de código y almacenarlos de forma segura en la nube mediante un sistema de control de versiones llamado Git.

Facilita la organización de proyectos y permite que varios desarrolladores colaboren en tiempo real. Es decir, nos permite centralizar el contenido del repositorio para poder colaborar con el resto de miembros de nuestra organización.

GitHub se basa en el sistema de control de versiones distribuido Git, por lo que puede confiar en sus funciones y herramientas. Sin embargo, GitHub ofrece varias opciones adicionales y su interfaz es mucho más sencilla de utilizar, por lo que no necesariamente requiere que tengas grandes conocimientos técnicos.

-Comandos principales de Git.
Git clone:
Git clone es un comando para descargarte el código fuente existente desde un repositorio remoto.
Git branch:
Las ramas (branch) son altamente importantes en el mundo de Git. Usando ramas, varios desarrolladores pueden trabajar en paralelo en el mismo proyecto simultáneamente. Podemos usar el comando git branch para crearlas, listarlas y eliminarlas.
Git branch -d <nombre-de-la-rama>
Borrar una rama.
Git branch --list
Visualización de las ramas.
Git checkout:
Para cambiar de una rama a otra.
git checkout -b <nombre-de-tu-rama>
Este comando crea una nueva rama en local (-b viene de rama (branch)) y te cambia a la rama que acabas de crear.
Git status
El comando de git status nos da toda la información necesaria sobre la rama actual.
Git add:
Necesitamos usar el comando git add para incluir los cambios del o de los archivos en tu siguiente commit.
Añadir un único archivo:
git add <archivo>
Añadir todo de una vez:
git add -A
Git commit:
Git commit es como establecer un punto de control en el proceso de desarrollo al cual puedes volver más tarde si es necesario.
También necesitamos escribir un mensaje corto para explicar qué hemos desarrollado o modificado en el código fuente.
Git push:
Git push envía tus commits al repositorio remoto.
Git pull (git pull <nombre-remoto>)
El comando git pull se utiliza para recibir actualizaciones del repositorio remoto.
Git revert 
A veces, necesitaremos deshacer los cambios que hemos hecho. Hay varias maneras para deshacer nuestros cambios en local y/o en remoto (dependiendo de lo que necesitemos), pero necesitaremos utilizar cuidadosamente estos comandos para evitar borrados no deseados.
La ventaja de utilizar git revert es que no afecta al commit histórico.
Git merge
Git merge básicamente integra las características de tu rama con todos los commits realizados a las ramas dev (o master). 
Por ejemplo, cuando quieres fusionar tu rama de características en la rama dev:

Primero, debes cambiarte a la rama dev:

git checkout dev

Antes de fusionar, debes actualizar tu rama dev local:

git fetch

Por último, puedes fusionar tu rama de características en la rama dev:

git merge <nombre-de-la-rama>

-Bibliografia
Qué es GitHub y cómo usarlo para aprovechar sus beneficios. (2023). Platzi. https://platzi.com/blog/que-es-github-como-funciona/

‌mijacobs. (2023, October 5). ¿Qué es Git? - Azure DevOps. Microsoft.com. https://learn.microsoft.com/es-es/devops/develop/git/what-is-git

‌